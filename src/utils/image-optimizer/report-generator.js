/**
 * @fileoverview AVIF Image Optimizer - Report Generator
 * 
 * Generates markdown and JSON reports of conversion results
 * 
 * @module report-generator
 */

import fs from 'fs';
import path from 'path';
import { formatBytes, formatTime, formatPercentage } from './output-formatter.js';

/**
 * Generate a markdown report from conversion results
 * @param {Object} summary - The conversion summary object
 * @param {string} outputPath - Path where the report should be saved
 * @returns {string} The path of the generated report
 */
export function generateMarkdownReport(summary, outputPath) {
  const { stats, results } = summary;
  const timestamp = new Date().toISOString();
  
  let content = `# AVIF Image Optimization Report

Generated on: ${timestamp}

## Summary

- **Files Processed**: ${stats.processed}
- **Files Skipped**: ${stats.skipped}
- **Files Resized**: ${stats.resized}
- **Total Original Size**: ${formatBytes(stats.totalOriginalSize)}
- **Total Output Size**: ${formatBytes(stats.totalOutputSize)}
- **Total Savings**: ${formatPercentage(stats.totalSavingsPercent)}
- **Total Processing Time**: ${formatTime(stats.totalProcessingTime)}
- **Average Processing Time**: ${formatTime(stats.averageProcessingTime)}
- **Batch Processing Time**: ${formatTime(stats.totalBatchTime)}
- **Concurrency Level**: ${stats.concurrency}
- **Errors**: ${stats.errors || 0}

## Detailed Results

| File | Original Size | Output Size | Savings | Dimensions | Processing Time |
|------|---------------|-------------|---------|------------|-----------------|
`;

  // Add each file result to the table
  results.forEach(result => {
    const dimensionChange = result.resized || result.dimensionChange
      ? `${result.originalWidth}x${result.originalHeight} â†’ ${result.newWidth}x${result.newHeight}`
      : `${result.originalWidth}x${result.originalHeight}`;
    
    const savingsPercent = result.savingsPercent !== undefined ? result.savingsPercent : result.sizeSavings;
    
    content += `| ${path.basename(result.inputPath)} | ${formatBytes(result.originalSize)} | ${formatBytes(result.outputSize)} | ${formatPercentage(savingsPercent)} | ${dimensionChange} | ${formatTime(result.processingTime)} |\n`;
  });

  content += `\n---\n*Report generated by AVIF Image Optimizer*\n`;

  // Write the report
  fs.writeFileSync(outputPath, content, 'utf8');
  return outputPath;
}

/**
 * Generate a JSON report from conversion results
 * @param {Object} summary - The conversion summary object
 * @param {string} outputPath - Path where the report should be saved
 * @returns {string} The path of the generated report
 */
export function generateJsonReport(summary, outputPath) {
  const report = {
    timestamp: new Date().toISOString(),
    stats: summary.stats,
    results: summary.results.map(result => ({
      ...result,
      // Include formatted values for convenience
      formatted: {
        originalSize: formatBytes(result.originalSize),
        outputSize: formatBytes(result.outputSize),
        savingsPercent: formatPercentage(result.savingsPercent !== undefined ? result.savingsPercent : result.sizeSavings),
        processingTime: formatTime(result.processingTime)
      }
    }))
  };

  // Write the report with pretty formatting
  fs.writeFileSync(outputPath, JSON.stringify(report, null, 2), 'utf8');
  return outputPath;
}

/**
 * Generate both markdown and JSON reports
 * @param {Object} summary - The conversion summary object
 * @param {string} baseDir - Base directory for reports
 * @param {string} [prefix='avif-report'] - Prefix for report filenames
 * @returns {Object} Paths of generated reports
 */
export function generateReports(summary, baseDir, prefix = 'avif-report') {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
  const markdownPath = path.join(baseDir, `${prefix}-${timestamp}.md`);
  const jsonPath = path.join(baseDir, `${prefix}-${timestamp}.json`);

  return {
    markdown: generateMarkdownReport(summary, markdownPath),
    json: generateJsonReport(summary, jsonPath)
  };
}